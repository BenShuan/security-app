// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//npx prisma migrate dev --name init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  guard
  admin
}

model User {
  id        String   @id @default(uuid())
  userName  String   @unique
  password  String
  role      Role     @default(guard)
  createdAt DateTime @default(now())
}

model Employee {
  id          String      @id @default(uuid())
  firstName   String
  lastName    String
  employeeId  String      @unique
  idNumber    String?     @unique
  phoneNumber String?
  email       String?     @unique
  position    String?
  address     String?
  active      Boolean     @default(true)
  startDate   DateTime    @default(now())
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  department  String?
  site        String?
  isManager   Boolean     @default(false)
  contractor  Contractor?
  managerId   String?
  manager     Employee?   @relation("ManagedContractors", fields: [managerId], references: [id], onDelete: SetNull)
  employees   Employee[]  @relation("ManagedContractors")
  guard       Guard?
  car         Car?
}

model Contractor {
  id             Int      @id @default(autoincrement())
  employee       Employee @relation(fields: [employeeId], references: [idNumber], onDelete: Cascade)
  employeeId     String   @unique
  authExpiryDate DateTime
  companyName    String?
}

model File {
  id          String   @id @default(uuid())
  name        String
  url         String   @unique
  downloadUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  guardId     String
  guard       Guard?   @relation("ProfileImage")
  guardFiles  Guard    @relation("GuardFiles", fields: [guardId], references: [employeeId], onDelete: Cascade)
}

model Guard {
  id         String    @id @default(uuid())
  employeeId String    @unique
  employee   Employee  @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
  lastCourse DateTime?
  nextCourse DateTime?
  imageUrl   String?   @unique
  image      File?     @relation("ProfileImage", fields: [imageUrl], references: [url], onDelete: SetNull)
  files      File[]    @relation("GuardFiles")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Car {
  id            String    @id @default(uuid())
  licenseNumber String    @unique
  model         String
  manufacturer  String
  employeeId    String   @unique
  employee      Employee @relation(fields: [employeeId], references: [employeeId], onDelete: SetDefault)
  authParking   Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
