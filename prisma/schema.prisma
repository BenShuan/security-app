// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//npx prisma migrate dev --name init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  guard
  manager
  admin
}

model User {
  id        String    @id @default(uuid())
  userName  String    @unique
  password  String
  site      String
  email     String
  role      Role      @default(guard)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  deletedAt DateTime?
}

model Employee {
  id          String      @id @default(uuid())
  firstName   String
  lastName    String
  employeeId  String      @unique
  idNumber    String?     @unique
  phoneNumber String?
  email       String?     @unique
  position    String?
  address     String?
  active      Boolean     @default(true)
  startDate   DateTime    @default(now())
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  department  String?
  site        String?
  keyLogs     KeyLog[]
  isManager   Boolean     @default(false)
  contractor  Contractor?
  managerId   String?
  manager     Employee?   @relation("ManagedContractors", fields: [managerId], references: [id], onDelete: SetNull)
  employees   Employee[]  @relation("ManagedContractors")
  guard       Guard?
  car         Car?
  RideLog     RideLog[]
}

model Contractor {
  id             Int      @id @default(autoincrement())
  employee       Employee @relation(fields: [employeeId], references: [idNumber], onDelete: Cascade)
  employeeId     String   @unique
  authExpiryDate DateTime
  companyName    String?
}

model File {
  id          String          @id @default(uuid())
  name        String
  url         String          @unique
  downloadUrl String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  guardId     String
  mustFiles   GuardMustFiles?
  guard       Guard?          @relation("ProfileImage")
  guardFiles  Guard           @relation("GuardFiles", fields: [guardId], references: [employeeId], onDelete: Cascade)
}

model GuardMustFiles {
  id             String   @id @default(uuid())
  fileUrl        String   @unique
  file           File     @relation(fields: [fileUrl], references: [url], onDelete: Cascade)
  experetionDate DateTime
  guardId        String
  guard          Guard    @relation("GurdMustFiles", fields: [guardId], references: [employeeId])
}

model Guard {
  id             String           @id @default(uuid())
  employeeId     String           @unique
  employee       Employee         @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
  lastCourse     DateTime?
  nextCourse     DateTime?
  imageUrl       String?          @unique
  image          File?            @relation("ProfileImage", fields: [imageUrl], references: [url], onDelete: SetNull)
  files          File[]           @relation("GuardFiles")
  keyLogs        KeyLog[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  RideLog        RideLog[]
  GuardMustFiles GuardMustFiles[] @relation("GurdMustFiles")
}

model Car {
  id            String    @id @default(uuid())
  licenseNumber String    @unique
  model         String
  manufacturer  String
  employeeId    String?   @unique
  employee      Employee? @relation(fields: [employeeId], references: [employeeId], onDelete: SetDefault)
  authParking   Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Password {
  id               String   @id @default(uuid())
  slug             String   @unique
  group            String
  name             String
  description      String?
  userName         String
  password         String
  seconde_password String?
  site             String
  initParams       String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Key {
  id          String   @id @default(uuid())
  keyNumber   String   @unique
  site        String
  description String
  keyLog      KeyLog[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model KeyLog {
  id          String    @id @default(uuid())
  keyNumber   String
  key         Key       @relation(fields: [keyNumber], references: [keyNumber], onDelete: Cascade)
  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
  keyOut      DateTime
  guardId     String
  guard       Guard     @relation(fields: [guardId], references: [employeeId], onDelete: SetDefault)
  createdAt   DateTime  @default(now())
  retrievedAt DateTime?
  updatedAt   DateTime  @updatedAt

  @@unique([keyNumber, employeeId, keyOut])
}

model RideCompany {
  id            String         @id @default(uuid())
  name          String         @unique
  areas         String
  RidesContacts RideContacts[]
  RidesLogs     RideLog[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model RideContacts {
  id              String      @id @default(uuid())
  name            String
  phoneNumber     String      @unique
  rideCompanyName String
  ridesCompany    RideCompany @relation(fields: [rideCompanyName], references: [name], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model RideLog {
  id              String       @id @default(uuid())
  employeeId      String
  employee        Employee     @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
  rideCompanyName String?
  ridesCompany    RideCompany? @relation(fields: [rideCompanyName], references: [name], onDelete: SetNull)
  reason          String
  action          String
  guardId         String
  guard           Guard        @relation(fields: [guardId], references: [employeeId])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}
